#####################################
# 1. 環境変数
#####################################
source GITALY_VAR_ENV.env
echo GITALY_LAUNCH_TEMPLATE_NAME=$GITALY_LAUNCH_TEMPLATE_NAME
echo GITALY_LAUNCH_TEMPLATE_ID=$GITALY_LAUNCH_TEMPLATE_ID
echo BLUE_LAUNCH_TEMPLATE_VERSION=$BLUE_GITALY_LAUNCH_TEMPLATE_VERSION

#####################################
# 2. 起動テンプレートのアップデート
#####################################
#旧OSの起動テンプレートのUserDataを取得
BLUE_GITALY_LAUNCH_TEMPLATE_JSON=$(aws ec2 describe-launch-template-versions \
  --launch-template-id $GITALY_LAUNCH_TEMPLATE_ID \
  --versions $BLUE_GITALY_LAUNCH_TEMPLATE_VERSION \
  --query 'LaunchTemplateVersions[0].LaunchTemplateData.{ImageId:ImageId, UserData:UserData}' \
  --output json | jq '@json')
echo BLUE_GITALY_LAUNCH_TEMPLATE_JSON=$BLUE_GITALY_LAUNCH_TEMPLATE_JSON | tee -a GITALY_VAR_ENV.env

#起動テンプレートのAMIとUserDataを変数化
BLUE_GITALY_LAUNCH_TEMPLATE_AMI=$(echo $BLUE_GITALY_LAUNCH_TEMPLATE_JSON | jq '. | fromjson' | jq -r .ImageId)
BLUE_GITALY_LAUNCH_TEMPLATE_USER_DATA=$(echo $BLUE_GITALY_LAUNCH_TEMPLATE_JSON | jq '. | fromjson' | jq -r .UserData)

echo BLUE_GITALY_LAUNCH_TEMPLATE_AMI=$BLUE_GITALY_LAUNCH_TEMPLATE_AMI | tee -a GITALY_VAR_ENV.env
echo BLUE_GITALY_LAUNCH_TEMPLATE_USER_DATA=$BLUE_GITALY_LAUNCH_TEMPLATE_USER_DATA | tee -a GITALY_VAR_ENV.env

#旧OSのUserDataのデコード結果をファイル出力
echo $BLUE_GITALY_LAUNCH_TEMPLATE_USER_DATA | base64 -d > blue_gitaly.txt
cat blue_gitaly.txt

#変更内容JSON
BLUE_TEMPLATE=$(cat << EOF
{
"UserData": "$BLUE_GITALY_LAUNCH_TEMPLATE_USER_DATA"
}
EOF
)
BLUE_LAUNCH_TEMPLATE_DATA=$(echo $BLUE_TEMPLATE | jq -c)
echo $BLUE_LAUNCH_TEMPLATE_DATA

#起動テンプレート差分更新実行
aws ec2 create-launch-template-version \
  --launch-template-id $GITALY_LAUNCH_TEMPLATE_ID \
  --version-description "OS Image back to AL2023 to AL2" \
  --source-version $BLUE_GITALY_LAUNCH_TEMPLATE_VERSION \
  --launch-template-data "$BLUE_LAUNCH_TEMPLATE_DATA" \
  --query "LaunchTemplateVersion.VersionNumber" \
  --output text

#更新後のGitalyの起動テンプレートを取得
BLUE_LAUNCH_TEMPLATE_VERSION_JSON=$(aws ec2 describe-launch-templates \
  --filters Name=launch-template-name,Values=${GITALY_LAUNCH_TEMPLATE_NAME}* \
  --query 'LaunchTemplates[0].{LaunchTemplateId:LaunchTemplateId, DefaultVersionNumber:DefaultVersionNumber, LatestVersionNumber:LatestVersionNumber}' \
  --output json | jq '@json')
echo BLUE_LAUNCH_TEMPLATE_VERSION_JSON=$BLUE_LAUNCH_TEMPLATE_VERSION_JSON | tee -a GITALY_VAR_ENV.env

BLUE_LAUNCH_TEMPLATE_LATEST_VERSION=$(echo $BLUE_LAUNCH_TEMPLATE_VERSION_JSON | jq '. | fromjson' | jq -r .LatestVersionNumber)
echo BLUE_LAUNCH_TEMPLATE_LATEST_VERSION=$BLUE_LAUNCH_TEMPLATE_LATEST_VERSION

#Gitalyの起動テンプレートのデフォルトVersionを旧OSの起動テンプレートのVersionに設定
aws ec2 modify-launch-template \
  --launch-template-id $GITALY_LAUNCH_TEMPLATE_ID \
  --default-version $BLUE_LAUNCH_TEMPLATE_LATEST_VERSION

#####################################
# 3. 新規インスタンスの起動（ASGを使用して）
#####################################
#現行のAutoScalingGroupが使用するテンプレートVersionを確認
GREEN_ASG_TEMPLATE_VERSION=$(aws autoscaling describe-auto-scaling-groups \
  --auto-scaling-group-name $GITALY_ASG_NAME \
  --query 'AutoScalingGroups[0].LaunchTemplate.Version' \
  --output text)
echo GREEN_ASG_TEMPLATE_VERSION=$GREEN_ASG_TEMPLATE_VERSION

#AutoScalingGroupが使用するテンプレートVersionを旧OSの起動テンプレートVersionを旧OSの起動テンプレートのVersionに設定
aws autoscaling update-auto-scaling-group \
  --auto-scaling-group-name $GITALY_ASG_NAME \
  --launch-template LaunchTemplateId=$GITALY_LAUNCH_TEMPLATE_ID,Version=$BLUE_LAUNCH_TEMPLATE_LATEST_VERSION

#変更後のAutoScalingGroupが使用するテンプレートVersionを確認
BLUE_ASG_TEMPLATE_VERSION=$(aws autoscaling describe-auto-scaling-groups \
  --auto-scaling-group-name $GITALY_ASG_NAME \
  --query 'AutoScalingGroups[0].LaunchTemplate.Version' \
  --output text)
echo BLUE_ASG_TEMPLATE_VERSION=$BLUE_ASG_TEMPLATE_VERSION

#スケールアウト実行前のインスタンス一覧確認
ALL_ASG_INSTANCES_JSON=$(aws autoscaling describe-auto-scaling-groups \
  --auto-scaling-group-name $GITALY_ASG_NAME \
  --query 'AutoScalingGroups[0].Instances[].{InstanceId:InstanceId, LifecycleState:LifecycleState, Version:LaunchTemplate.Version}' \
  --output json | jq '@json')
echo $ALL_ASG_INSTANCES_JSON | jq '. | fromjson'

#スケールアウト実行（2倍に拡張）
aws autoscaling update-auto-scaling-group \
  --auto-scaling-group-name $GITALY_ASG_NAME \
  --desired-capacity 6 \
  --max-size 6

#新インスタンス（旧OSのテンプレート）が、2倍に増え&稼働中（InService）になるまで待機
ALL_ASG_INSTANCES_JSON=$(aws autoscaling describe-auto-scaling-groups \
  --auto-scaling-group-name $GITALY_ASG_NAME \
  --query 'AutoScalingGroups[0].Instances[].{InstanceId:InstanceId, LifecycleState:LifecycleState, Version:LaunchTemplate.Version}' \
  --output json | jq '@json')
echo $ALL_ASG_INSTANCES_JSON | jq '. | fromjson'

BLUE_INSTANCE_IDS=($(echo $ALL_ASG_INSTANCES_JSON | jq '. | fromjson' | jq ".[] | select(.Version == \"$BLUE_LAUNCH_TEMPLATE_LATEST_VERSION\" and .LifecycleState == \"InService\")" | jq -r .InstanceId))

BLUE_INSTANCE_ID_0=${BLUE_INSTANCE_IDS[0]}
BLUE_INSTANCE_ID_1=${BLUE_INSTANCE_IDS[1]}
BLUE_INSTANCE_ID_2=${BLUE_INSTANCE_IDS[2]}
echo BLUE_INSTANCE_IP_0=$BLUE_INSTANCE_IP_0 | tee -a GITALY_VAR_ENV.env
echo BLUE_INSTANCE_IP_1=$BLUE_INSTANCE_IP_1 | tee -a GITALY_VAR_ENV.env
echo BLUE_INSTANCE_IP_2=$BLUE_INSTANCE_IP_2 | tee -a GITALY_VAR_ENV.env

#旧OSのインスタンスのPrivateIPアドレスを取得
BLUE_INSTANCES_JSON=$(aws ec2 describe-instances \
  --instance-ids $BLUE_INSTANCE_ID_0 $BLUE_INSTANCE_ID_1 $BLUE_INSTANCE_ID_2 \
  --query 'Reservations[].Instances[].{InstanceId:InstanceId, PrivateIpAddress:PrivateIpAddress}' \
  --output json | jq '@json')
echo $BLUE_INSTANCES_JSON | jq '. | fromjson'

BLUE_INSTANCE_IP_0=$(echo $BLUE_INSTANCES_JSON | jq '. | fromjson' | jq -r '.[0].PrivateIpAddress')
BLUE_INSTANCE_IP_1=$(echo $BLUE_INSTANCES_JSON | jq '. | fromjson' | jq -r '.[1].PrivateIpAddress')
BLUE_INSTANCE_IP_2=$(echo $BLUE_INSTANCES_JSON | jq '. | fromjson' | jq -r '.[2].PrivateIpAddress')
echo BLUE_INSTANCE_IP_0=$BLUE_INSTANCE_IP_0 | tee -a GITALY_VAR_ENV.env
echo BLUE_INSTANCE_IP_1=$BLUE_INSTANCE_IP_1 | tee -a GITALY_VAR_ENV.env
echo BLUE_INSTANCE_IP_2=$BLUE_INSTANCE_IP_2 | tee -a GITALY_VAR_ENV.env

ssh -i ../opsman-dev.pem vcap@$BLUE_INSTANCE_IP_X
sudo tail -f /var/log/cloud-init-output.log

#現行（Blue）のGitalyのDNSレコードを取得
GREEN_RECORD_IPS=($(aws route53 list-resource-record-sets \
  --hosted-zone-id $PRIVATE_HOST_ZONE_ID \
  --query "ResourceRecordSets[?(contains(Name, 'gtlc-') && Type=='A')].ResourceRecords[0].Value" \
  --output text))


GREEN_RECORD_IP_0=${GREEN_RECORD_IPS[0]}
GREEN_RECORD_IP_1=${GREEN_RECORD_IPS[1]}
GREEN_RECORD_IP_2=${GREEN_RECORD_IPS[2]}
echo GREEN_RECORD_IP_0=$GREEN_RECORD_IP_0 | tee -a GITALY_VAR_ENV.env
echo GREEN_RECORD_IP_1=$GREEN_RECORD_IP_1 | tee -a GITALY_VAR_ENV.env
echo GREEN_RECORD_IP_2=$GREEN_RECORD_IP_2 | tee -a GITALY_VAR_ENV.env

#Greenレコードの削除（gitlc-X）パッチJSON作成
GREEN_RECORD_BATCH_JSON=$(cat <<EOF
{
  "Changes": [
    {
      "Action": "DELETE",
      "ResourceRecordSet": {
        "Name": "gtlc-0.${PRIVATE_HOST_ZONE_NAME}",
        "Type": "A",
        "TTL": 300,
        "ResourceRecords": [
          {
            "Value": "$GREEN_RECORD_IP_0"
          }
        ]
      }
    },
    {
      "Action": "DELETE",
      "ResourceRecordSet": {
        "Name": "gtlc-1.${PRIVATE_HOST_ZONE_NAME}",
        "Type": "A",
        "TTL": 300,
        "ResourceRecords": [
          {
            "Value": "$GREEN_RECORD_IP_1"
          }
        ]
      }
    },
    {
      "Action": "DELETE",
      "ResourceRecordSet": {
        "Name": "gtlc-2.${PRIVATE_HOST_ZONE_NAME}",
        "Type": "A",
        "TTL": 300,
        "ResourceRecords": [
          {
            "Value": "$GREEN_RECORD_IP_2"
          }
        ]
      }
    }
  ]
}
EOF
)
echo $GREEN_RECORD_BATCH_JSON | jq .

#削除する前のDNSレコードを確認
aws route53 list-resource-record-sets \
  --hosted-zone-id $PRIVATE_HOST_ZONE_ID \
  --query "ResourceRecordSets[?(contains(Name, 'gtlc-') && Type=='A')].{Name:Name, IP:ResourceRecords[0].Value}" \
  --output table

#DNSレコード削除実行
aws route53 change-resource-record-sets \
  --hosted-zone-id $PRIVATE_HOST_ZONE_ID \
  --change-batch "$GREEN_RECORD_BATCH_JSON"

#削除したあとのレコードの確認
aws route53 list-resource-record-sets \
  --hosted-zone-id $PRIVATE_HOST_ZONE_ID \
  --query "ResourceRecordSets[?(contains(Name, 'gtlc-') && Type=='A')].{Name:Name, IP:ResourceRecords[0].Value}"

#スケール実行前のインスタンス一覧確認
ASG_ALL_INSTANCES_JSON=$(aws autoscaling describe-auto-scaling-groups \
  --auto-scaling-group-name $GITALY_ASG_NAME \
  --query 'AutoScalingGroups[0].Instances[].{InstanceId:InstanceId,LifecycleState:LifecycleState, Version:LaunchTemplate.Version}' \
  --output json | jq '@json')
echo $ASG_ALL_INSTANCES_JSON | jq '. | fromjson'

#スケールイン実行（6 → 3）
aws autoscaling update-auto-scaling-group \
  --auto-scaling-group-name $GITALY_ASG_NAME \
  --desired-capacity 3 \
  --max-size 3

#新インスタンス（新バージョンのテンプレート）だけが3個稼働（InService）になっていることを確認
ASG_ALL_INSTANCES_JSON=$(aws autoscaling describe-auto-scaling-groups \
  --auto-scaling-group-name $GITALY_ASG_NAME \
  --query 'AutoScalingGroups[0].Instances[].{InstanceId:InstanceId,LifecycleState:LifecycleState, Version:LaunchTemplate.Version}' \
  --output json | jq '@json')
echo $ASG_ALL_INSTANCES_JSON | jq '. | fromjson'

ssh -i ../opsman-dev.pem vcap@$PRAEFECT_INSTANCE_IP
sudo tail -f /var/log/gitlab/praefect/current

#Blueレコードの登録（gtlc-X）バッチJSON削除
BLUE_RECORD_BATCH_JSON=$(cat <<EOF
{
  "Changes": [
    {
      "Action": "CREATE",
      "ResourceRecordSet": {
        "Name": "gtlc-0.${PRIVATE_HOST_ZONE_NAME}",
        "Type": "A",
        "TTL": 300,
        "ResourceRecords": [
          {
            "Value": "$BLUE_INSTANCE_IP_0"
          }
        ]
      }
    },
    {
      "Action": "CREATE",
      "ResourceRecordSet": {
        "Name": "gtlc-1.${PRIVATE_HOST_ZONE_NAME}",
        "Type": "A",
        "TTL": 300,
        "ResourceRecords": [
          {
            "Value": "$BLUE_INSTANCE_IP_1"
          }
        ]
      }
    },
    {
      "Action": "CREATE",
      "ResourceRecordSet": {
        "Name": "gtlc-2.${PRIVATE_HOST_ZONE_NAME}",
        "Type": "A",
        "TTL": 300,
        "ResourceRecords": [
          {
            "Value": "$BLUE_INSTANCE_IP_2"
          }
        ]
      }
    }
  ]
}
EOF
)
echo $BLUE_RECORD_BATCH_JSON | jq .

#登録する前のDNSレコードを確認
aws route53 list-resource-record-sets \
  --hosted-zone-id $PRIVATE_HOST_ZONE_ID \
  --query "ResourceRecordSets[?(contains(Name, 'gtlc-') && Type=='A')].{Name:Name, IP:ResourceRecords[0].Value}" \

#DNSレコード登録実行
aws route53 change-resource-record-sets \
  --hosted-zone-id $PRIVATE_HOST_ZONE_ID \
  --change-batch "$BLUE_RECORD_BATCH_JSON"

#登録した後のレコードの確認
aws route53 list-resource-record-sets \
  --hosted-zone-id $PRIVATE_HOST_ZONE_ID \
  --query "ResourceRecordSets[?(contains(Name, 'gtlc-') && Type=='A')].{Name:Name, IP:ResourceRecords[0].Value}"

ssh -i ../opsman-dev.pem vcap@$PRAEFECT_INSTANCE_IP

sudo tail -f /var/log/gitlab/praefect/current

sudo bash /var/lib/cloud/instance/scripts/part-001
